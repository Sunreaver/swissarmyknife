//
//  AppDelegate.swift
//  TodayHistory
//
//  Created by Ë∞≠‰ºü on 15/9/9.
//  Copyright (c) 2015Âπ¥ Ë∞≠‰ºü. All rights reserved.
//

import UIKit
import ionicons
import ReactiveCocoa

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

    var window: UIWindow?
    let health:HealthStoreManager = {
        return HealthStoreManager()
    }()

    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {
        // Override point for customization after application launch.
        let tabbarCtrl = self.window!.rootViewController
        let üíª = tabbarCtrl?.childViewControllers[0]
        let üìÖ = tabbarCtrl?.childViewControllers[1]
        let üìí = tabbarCtrl?.childViewControllers[2]
        let üí™ = tabbarCtrl?.childViewControllers[3]
        let üëÄ = tabbarCtrl?.childViewControllers[4]
        üíª?.tabBarItem.image = IonIcons.imageWithIcon(ion_ios_calculator_outline, size: 27.0, color: UIColor.blackColor())
        üíª?.tabBarItem.selectedImage = IonIcons.imageWithIcon(ion_ios_calculator_outline, size: 27.0, color: Colors.google0)
        üíª?.tabBarItem.title = "Êó•ÊúüËÆ°ÁÆó"
        üíª?.tabBarItem.setTitleTextAttributes([NSForegroundColorAttributeName:Colors.google0], forState: UIControlState.Selected)
        üíª?.tabBarItem.setTitleTextAttributes([NSForegroundColorAttributeName:UIColor.blackColor()], forState: UIControlState.Normal)
        
        üìÖ?.tabBarItem.image = IonIcons.imageWithIcon(ion_ios_calendar_outline, size: 27.0, color: UIColor.blackColor())
        üìÖ?.tabBarItem.selectedImage = IonIcons.imageWithIcon(ion_ios_calendar_outline, size: 27.0, color: Colors.google0)
        üìÖ?.tabBarItem.title = "ÂéÜÂè≤‰ªäÂ§©"
        üìÖ?.tabBarItem.setTitleTextAttributes([NSForegroundColorAttributeName:Colors.google0], forState: UIControlState.Selected)
        üìÖ?.tabBarItem.setTitleTextAttributes([NSForegroundColorAttributeName:UIColor.blackColor()], forState: UIControlState.Normal)
        
        üìí?.tabBarItem.image = IonIcons.imageWithIcon(ion_ios_book_outline, size: 27.0, color: UIColor.blackColor())
        üìí?.tabBarItem.selectedImage = IonIcons.imageWithIcon(ion_ios_book_outline, size: 27.0, color: Colors.google0)
        üìí?.tabBarItem.title = "ËØçÂÖ∏"
        üìí?.tabBarItem.setTitleTextAttributes([NSForegroundColorAttributeName:Colors.google0], forState: UIControlState.Selected)
        üìí?.tabBarItem.setTitleTextAttributes([NSForegroundColorAttributeName:UIColor.blackColor()], forState: UIControlState.Normal)
        
        üí™?.tabBarItem.image = IonIcons.imageWithIcon(ion_ios_body_outline, size: 27.0, color: UIColor.blackColor())
        üí™?.tabBarItem.selectedImage = IonIcons.imageWithIcon(ion_ios_body_outline, size: 27.0, color: Colors.google0)
        üí™?.tabBarItem.title = "ÂÅ•Â∫∑"
        üí™?.tabBarItem.setTitleTextAttributes([NSForegroundColorAttributeName:Colors.google0], forState: UIControlState.Selected)
        üí™?.tabBarItem.setTitleTextAttributes([NSForegroundColorAttributeName:UIColor.blackColor()], forState: UIControlState.Normal)
        
        üëÄ?.tabBarItem.image = IonIcons.imageWithIcon(ion_arrow_graph_up_right, size: 27.0, color: UIColor.blackColor())
        üëÄ?.tabBarItem.selectedImage = IonIcons.imageWithIcon(ion_arrow_graph_up_right, size: 27.0, color: Colors.google0)
        üëÄ?.tabBarItem.title = "ËØª‰π¶"
        üëÄ?.tabBarItem.setTitleTextAttributes([NSForegroundColorAttributeName:Colors.google0], forState: UIControlState.Selected)
        üëÄ?.tabBarItem.setTitleTextAttributes([NSForegroundColorAttributeName:UIColor.blackColor()], forState: UIControlState.Normal)
        
        (tabbarCtrl as! UITabBarController).selectedIndex = 4
        
        self.window?.layer.masksToBounds = true
        self.window?.layer.cornerRadius = 10.0

        return true
    }

    func applicationWillResignActive(application: UIApplication) {
        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
        // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
    }

    func applicationDidEnterBackground(application: UIApplication) {
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.

        let date = UserDef.getUserDefValue(BadgeNumberDate)
        if let _ = date
        {
            application.applicationIconBadgeNumber = self.calculateBadgeNum(date as! String)
        }
    }

    func applicationWillEnterForeground(application: UIApplication) {
        // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
    }

    func applicationDidBecomeActive(application: UIApplication) {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
//        application.applicationIconBadgeNumber = self.calculateBadgeNum()
        self.regNotification()
    }

    func applicationWillTerminate(application: UIApplication) {
        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
    }
    
    func application(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject) -> Bool {
        if url.absoluteString.hasPrefix("SwissArmyKnifeToday://action=refreshBadgeNumber")
        {
            let date = UserDef.getUserDefValue(BadgeNumberDate)
            if let _ = date
            {
                application.applicationIconBadgeNumber = self.calculateBadgeNum(date as! String)
            }
        }
        return false;
    }
    
    func application(application: UIApplication, handleActionWithIdentifier identifier: String?, forLocalNotification notification: UILocalNotification, completionHandler: () -> Void) {
        if let _ = identifier
        {
            let refreshDay:NSString = "refreshDay_"
            let ide:NSString = identifier!
            if ide.hasPrefix(refreshDay as String)
            {
                UserDef.setUserDefValue(ide.substringFromIndex(refreshDay.length), keyName: BadgeNumberDate)
                application.applicationIconBadgeNumber = self.calculateBadgeNum(ide.substringFromIndex(refreshDay.length))
            }
            else if identifier == "Drinkcoffee"
            {
                self.health.setCoffeeWithDay(NSDate(), quantity: 0.03, block: { (success, g, sum) -> Void in
                    
                });
            }
            else if identifier == "NoDrinkcoffee"
            {
                let av:UIAlertView = UIAlertView(title: "‰ªäÂ§©Â§öÂ∞ë", message: "Âä†Ê≤π", delegate: nil, cancelButtonTitle: "0mg", otherButtonTitles: "10mg", "20mg", "30mg", "40mg");
                av.show()
                
                av.rac_buttonClickedSignal().subscribeNext({ (index) -> Void in
                    let g = 0.01 * Double(index.intValue)
                    self.health.setCoffeeWithDay(NSDate(timeIntervalSinceNow: -2*60), quantity: g, block: { (result, today, sum) -> Void in
                        if !result
                        {
                            let av:UIAlertView = UIAlertView(title: "Ê≥®ÊÑè", message: "ÂÜôÂÖ•Â§±Ë¥•", delegate: nil, cancelButtonTitle: "ÊúïÁü•ÈÅìÂï¶")
                            av.show()
                        }
                    })
                })
            }
            else if identifier == "WalkHome"
            {
                let df = NSDateFormatter();
                df.dateFormat = "yyyyMMddHHmm";
                var date = df.dateFromString(NSDate().yyyyMMddStringValue().stringByAppendingString("1840"))
                if (date?.timeIntervalSinceNow > 0)
                {
                    date = NSDate(timeInterval: -24*3600, sinceDate: date!)
                }
                self.health.setWorkoutWalkingWithDay(date, block: { (success, today, sum, date) -> Void in
                })
            }
        }
        completionHandler()
    }
    
    func regNotification()
    {
        //DateCalculate Ê∂àÊÅØÁ±ªÂûã
        let action01:UIMutableUserNotificationAction = UIMutableUserNotificationAction()
        action01.title = "ËΩ©ËΩ©"
        action01.identifier = "refreshDay_20150530"
        action01.activationMode = UIUserNotificationActivationMode.Background
        let action03:UIMutableUserNotificationAction = UIMutableUserNotificationAction()
        action03.title = "Â∞èÂåó"
        action03.identifier = "refreshDay_20091115"
        action03.activationMode = UIUserNotificationActivationMode.Background
        
        let categorys0:UIMutableUserNotificationCategory = UIMutableUserNotificationCategory()
        categorys0.identifier = "DateCalculate"
        categorys0.setActions([action01, action03], forContext: UIUserNotificationActionContext.Default)
        
        //CoffeeTime Ê∂àÊÅØÁ±ªÂûã
        let action0:UIMutableUserNotificationAction = UIMutableUserNotificationAction()
        action0.title = "30mg"
        action0.identifier = "Drinkcoffee"
        action0.activationMode = UIUserNotificationActivationMode.Background
        let action1:UIMutableUserNotificationAction = UIMutableUserNotificationAction()
        action1.title = "ÂÖ∂ÂÆÉ"
        action1.identifier = "NoDrinkcoffee"
        action1.activationMode = UIUserNotificationActivationMode.Foreground
        action1.authenticationRequired = false
        action1.destructive = true
        
        let categorys1:UIMutableUserNotificationCategory = UIMutableUserNotificationCategory()
        categorys1.identifier = "CoffeeTime"
        categorys1.setActions([action0, action1], forContext: UIUserNotificationActionContext.Default)
        
        //WorkoutWalk Ê∂àÊÅØÁ±ªÂûã
        let action001:UIMutableUserNotificationAction = UIMutableUserNotificationAction()
        action001.title = "Ëµ∞ÂõûÂÆ∂‰∫ÜÔºü"
        action001.identifier = "WalkHome"
        action001.activationMode = UIUserNotificationActivationMode.Background
        
        let categorys001:UIMutableUserNotificationCategory = UIMutableUserNotificationCategory()
        categorys001.identifier = "WorkoutWalk"
        categorys001.setActions([action001], forContext: UIUserNotificationActionContext.Default)
        
        let unsCoffee:UIUserNotificationSettings = UIUserNotificationSettings(forTypes: [.Sound, .Badge], categories: NSSet(array: [categorys0, categorys1, categorys001]) as? Set<UIUserNotificationCategory>)
        UIApplication.sharedApplication().registerUserNotificationSettings(unsCoffee)
        
        //ÂèñÊ∂àÂ∑≤ÁªèÊ∑ªÂä†ÁöÑDateCalculateÊèêÈÜí
        /*
        for notification in UIApplication.sharedApplication().scheduledLocalNotifications!
        {
            if let type = notification.userInfo?["type"] where
                type as! String == "DateCalculate" || type as! String == "CoffeeTime"
            {
                UIApplication.sharedApplication().cancelLocalNotification(notification)
            }
        }
        */
        UIApplication.sharedApplication().cancelAllLocalNotifications()
        
        //Ê≥®ÂÜåDateCalculate
        let df:NSDateFormatter = NSDateFormatter()
        df.dateFormat = "yyyyMMdd"
        var ds0:NSString = df.stringFromDate(NSDate())
        df.dateFormat = "yyyyMMdd HH:mm:ss"
        let notification:UILocalNotification = UILocalNotification()
        var fireString:String = ds0.stringByAppendingString(" 08:00:00")
        notification.fireDate = df.dateFromString(fireString)
        notification.repeatInterval = NSCalendarUnit.Day;//Âæ™ÁéØÊ¨°Êï∞ÔºåkCFCalendarUnitWeekday‰∏ÄÂë®‰∏ÄÊ¨°
        notification.soundName = "nosound.caf";//Â£∞Èü≥ÔºåÂèØ‰ª•Êç¢Êàêalarm.soundName = @"myMusic.caf"
        notification.alertTitle = "Êó•ÊúüËØ•Êõ¥Êñ∞Âï¶";//ÊèêÁ§∫‰ø°ÊÅØ ÂºπÂá∫ÊèêÁ§∫Ê°Ü
        notification.alertBody = "ÁæéÂ•ΩÁîüÊ¥ªÔºå‰ªéËøôÈáåÂºÄÂßã";//ÊèêÁ§∫‰ø°ÊÅØ ÂºπÂá∫ÊèêÁ§∫Ê°Ü
//        notification.alertAction = "Âà∑Êñ∞Êó•Êúü";  //ÊèêÁ§∫Ê°ÜÊåâÈíÆ
//        notification.hasAction = true; //ÊòØÂê¶ÊòæÁ§∫È¢ùÂ§ñÁöÑÊåâÈíÆÔºå‰∏∫noÊó∂alertActionÊ∂àÂ§±
        notification.category = "DateCalculate"
        notification.userInfo = ["type":"DateCalculate"]
        UIApplication.sharedApplication().scheduleLocalNotification(notification)
        
        //Ê≥®ÂÜåCoffeeTime
        df.dateFormat = "yyyyMMdd"
        ds0 = df.stringFromDate(NSDate())
        df.dateFormat = "yyyyMMdd HH:mm:ss"
        let notification1:UILocalNotification = UILocalNotification()
        fireString = ds0.stringByAppendingString(" 16:05:30")
        notification1.fireDate = df.dateFromString(fireString)
        notification1.repeatInterval = NSCalendarUnit.Day//Âæ™ÁéØÊ¨°Êï∞ÔºåkCFCalendarUnitWeekday‰∏ÄÂë®‰∏ÄÊ¨°
        notification1.soundName = "No05.caf";//Â£∞Èü≥ÔºåÂèØ‰ª•Êç¢Êàêalarm.soundName = @"myMusic.caf"
        notification1.alertTitle = "Rest Awhile Fat BOY!"
        notification1.alertBody = "Coffee Time";//ÊèêÁ§∫‰ø°ÊÅØ ÂºπÂá∫ÊèêÁ§∫Ê°Ü
//        notification1.hasAction = true
        notification1.userInfo = ["type":"CoffeeTime"]
        notification1.category = "CoffeeTime"
        UIApplication.sharedApplication().scheduleLocalNotification(notification1)
        
        //Ê≥®ÂÜåWorkoutWalk
        df.dateFormat = "yyyyMMdd"
        ds0 = df.stringFromDate(NSDate())
        df.dateFormat = "yyyyMMdd HH:mm:ss"
        let notification2:UILocalNotification = UILocalNotification()
        fireString = ds0.stringByAppendingString(" 19:20:10")
        notification2.fireDate = df.dateFromString(fireString)
        notification2.repeatInterval = NSCalendarUnit.Day//Âæ™ÁéØÊ¨°Êï∞ÔºåkCFCalendarUnitWeekday‰∏ÄÂë®‰∏ÄÊ¨°
        notification2.soundName = "nosound.caf";//Â£∞Èü≥ÔºåÂèØ‰ª•Êç¢Êàêalarm.soundName = @"myMusic.caf"
        notification2.alertTitle = "‰ªäÂ§©Ëµ∞ÂõûÂÆ∂‰∫ÜÂêóÔºü"
        notification2.alertBody = "Commmmme on Boy!";//ÊèêÁ§∫‰ø°ÊÅØ ÂºπÂá∫ÊèêÁ§∫Ê°Ü
        notification2.userInfo = ["type":"WorkoutWalk"]
        notification2.category = "WorkoutWalk"
        UIApplication.sharedApplication().scheduleLocalNotification(notification2)
        
        /*
        //Ê≥®ÂÜåËØª‰π¶ÊèêÈÜí
        df.dateFormat = "yyyyMMdd"
        ds0 = df.stringFromDate(NSDate())
        df.dateFormat = "yyyyMMdd HH:mm:ss"
        let notification3:UILocalNotification = UILocalNotification()
        fireString = ds0.stringByAppendingString(" 22:40:10")
        notification3.fireDate = df.dateFromString(fireString)
        notification3.repeatInterval = NSCalendarUnit.Day//Âæ™ÁéØÊ¨°Êï∞ÔºåkCFCalendarUnitWeekday‰∏ÄÂë®‰∏ÄÊ¨°
        notification3.soundName = "nosound.caf";//Â£∞Èü≥ÔºåÂèØ‰ª•Êç¢Êàêalarm.soundName = @"myMusic.caf"
        notification3.alertTitle = "ÈòÖËØª‰∫ÜÊ≤°Ôºü"
        notification3.alertBody = "ÊØèÊó•‰∏ÄËØª!";//ÊèêÁ§∫‰ø°ÊÅØ ÂºπÂá∫ÊèêÁ§∫Ê°Ü
        notification3.userInfo = ["type":"Readding"]
        UIApplication.sharedApplication().scheduleLocalNotification(notification3)
        */
    }
    
    func calculateBadgeNum (birthday:String) ->NSInteger
    {
        let df:NSDateFormatter = NSDateFormatter()
        df.dateFormat = "yyyyMMdd"
        let start:NSDate = df.dateFromString(birthday)!
        let end:NSDate = df.dateFromString(df.stringFromDate(NSDate()))!
        var ti:NSTimeInterval = end.timeIntervalSince1970 - start.timeIntervalSince1970
        ti += ti > 0 ? 3600 : -3600
        let iDay:NSInteger = NSInteger(floor(ti/3600.0/24.0))
        return iDay
    }

}

